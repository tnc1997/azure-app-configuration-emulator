@using System.Linq.Expressions

<AzureInputSelect AdditionalAttributes="@AdditionalAttributes" TValue="@string" Value="@Value" ValueChanged="@HandleValueChanged" ValueExpression="@ValueExpression">
    <option checked="@(Value is null)" hidden value="">Please select a file type</option>
    <option checked="@(Value is FileFormat.Json)" value="@FileFormat.Json">Json</option>
    <option checked="@(Value is FileFormat.Yaml)" disabled value="@FileFormat.Yaml">Yaml</option>
    <option checked="@(Value is FileFormat.Properties)" disabled value="@FileFormat.Properties">Properties</option>
</AzureInputSelect>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public string? Value { get; set; }

    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public Expression<Func<string?>>? ValueExpression { get; set; }

    private async Task HandleValueChanged(string? value)
    {
        await ValueChanged.InvokeAsync(!string.IsNullOrEmpty(value) ? value : null);
    }

    public static class FileFormat
    {
        public const string Json = ".json";

        public const string Properties = ".properties";

        public const string Yaml = ".yaml,.yml";
    }

}