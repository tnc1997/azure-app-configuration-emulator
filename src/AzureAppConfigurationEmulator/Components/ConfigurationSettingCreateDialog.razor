@inject IConfigurationSettingFactory ConfigurationSettingFactory
@inject IDialogService DialogService
@rendermode InteractiveServer
@using AzureAppConfigurationEmulator.Entities
@using AzureAppConfigurationEmulator.Factories
@using AzureAppConfigurationEmulator.Services

<AzureDialog Id="@Id">
    <HeaderContent>
        <AzureDialogHeader Subtitle="Create a new key-value." Title="Create"/>
    </HeaderContent>

    <ChildContent>
        <div class="flex flex-col gap-4 pb-4">
            <AzureTextField @bind-Value="Input.Key" IsRequired="true" Label="Key"/>
            <AzureTextField @bind-Value="Input.Value" Label="Value"/>
            <AzureTextField @bind-Value="Input.Label" Label="Label" Placeholder="(No label)"/>
            <AzureTextField @bind-Value="Input.ContentType" Label="Content type"/>
        </div>
    </ChildContent>

    <FooterContent>
        <AzureDialogFooter>
            <AzureButton Appearance="AzureButton.AzureAppearance.Primary" IsDisabled="@IsDisabled" Label="Create" OnClick="@HandleCreateClick"/>
        </AzureDialogFooter>
    </FooterContent>
</AzureDialog>

@code {
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    
    [Parameter] public EventCallback<ConfigurationSetting> OnCreate { get; set; }

    private bool IsDisabled => string.IsNullOrEmpty(Input.Key);

    private InputModel Input { get; } = new();

    private async Task HandleCreateClick(MouseEventArgs args)
    {
        if (!string.IsNullOrEmpty(Input.Key))
        {
            await OnCreate.InvokeAsync(ConfigurationSettingFactory.Create(Input.Key, Input.Label, Input.ContentType, Input.Value));

            await DialogService.CloseAsync(Id);
        }
    }

    private class InputModel
    {
        public string? Key { get; set; }

        public string? Value { get; set; }

        public string? Label { get; set; }

        public string? ContentType { get; set; }
    }

}