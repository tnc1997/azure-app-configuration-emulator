@using System.Linq.Expressions

<AzureInputSelect AdditionalAttributes="@AdditionalAttributes" TValue="@string" Value="@Value" ValueChanged="@HandleValueChanged" ValueExpression="@ValueExpression">
    <option checked="@(Value is null)" value="">(No separator)</option>
    <option checked="@(Value is Separator.FullStop)" value="@Separator.FullStop">&#46;</option>
    <option checked="@(Value is Separator.Comma)" value="@Separator.Comma">&#44;</option>
    <option checked="@(Value is Separator.Colon)" value="@Separator.Colon">&#58;</option>
    <option checked="@(Value is Separator.Semicolon)" value="@Separator.Semicolon">&#59;</option>
    <option checked="@(Value is Separator.Slash)" value="@Separator.Slash">&#47;</option>
    <option checked="@(Value is Separator.Hyphen)" value="@Separator.Hyphen">&#45;</option>
    <option checked="@(Value is Separator.Underscore)" value="@Separator.Underscore">&#95;</option>
    <option checked="@(Value is Separator.UnderscoreUnderscore)" value="@Separator.UnderscoreUnderscore">&#95;&#95;</option>
</AzureInputSelect>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public string? Value { get; set; }

    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public Expression<Func<string?>>? ValueExpression { get; set; }

    private async Task HandleValueChanged(string? value)
    {
        await ValueChanged.InvokeAsync(!string.IsNullOrEmpty(value) ? value : null);
    }

    public static class Separator
    {
        public const string Colon = ":";

        public const string Comma = ",";

        public const string FullStop = ".";

        public const string Hyphen = "-";

        public const string Semicolon = ";";

        public const string Slash = "/";

        public const string Underscore = "_";

        public const string UnderscoreUnderscore = "__";
    }

}