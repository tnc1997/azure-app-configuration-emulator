@using System.Linq.Expressions

<InputCheckbox @attributes="@AdditionalAttributes" class="hidden" Value="@Value" ValueChanged="@ValueChanged" ValueExpression="@ValueExpression"/>

<div aria-checked="@Value.ToString().ToLower()" class="relative p-1 rounded-full border transition-all cursor-pointer disabled:cursor-default border-storm-dust aria-checked:border-lochmara aria-checked:bg-lochmara group w-[44px] h-[20px] dark:border-star-dust" @onclick="@HandleClick" role="checkbox">
    <div class="absolute left-1 rounded-full transition-all bg-storm-dust group-aria-checked:bg-white w-[10px] h-[10px] group-aria-checked:left-7 dark:bg-star-dust dark:group-aria-checked:bg-cod-grey"></div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public bool Value { get; set; }

    [Parameter] public EventCallback<bool> ValueChanged { get; set; }

    [Parameter] public Expression<Func<bool>>? ValueExpression { get; set; }

    private async Task HandleClick(MouseEventArgs args)
    {
        await ValueChanged.InvokeAsync(!Value);
    }

}