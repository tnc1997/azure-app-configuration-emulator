@using System.Linq.Expressions

<AzureInputSelect AdditionalAttributes="@AdditionalAttributes" TValue="@string?[]" Value="@Value" ValueChanged="@HandleValueChanged" ValueExpression="@ValueExpression">
    @if (Labels is not null)
    {
        @foreach (var label in Labels)
        {
            <option checked="@(Value?.Contains(label) is true)" value="@(label ?? "")">@(label ?? "(No label)")</option>
        }
    }
</AzureInputSelect>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public IEnumerable<string?>? Labels { get; set; }
    
    [Parameter] public string?[]? Value { get; set; }

    [Parameter] public EventCallback<string?[]?> ValueChanged { get; set; }

    [Parameter] public Expression<Func<string?[]?>>? ValueExpression { get; set; }

    private async Task HandleValueChanged(string?[]? values)
    {
        await ValueChanged.InvokeAsync(values?.Select(value => !string.IsNullOrEmpty(value) ? value : null).ToArray());
    }

}